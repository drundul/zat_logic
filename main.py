
import os
import threading
import logging
import json
import openai
import sqlite3
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PORT = int(os.environ.get("PORT", 10000))

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
def fake_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Bot is running.')
    server = HTTPServer(('0.0.0.0', PORT), Handler)
    server.serve_forever()
threading.Thread(target=fake_server).start()

logging.basicConfig(level=logging.INFO)

# SQLite-–±–∞–∑–∞
conn = sqlite3.connect("data.db", check_same_thread=False)
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, name TEXT)")
c.execute("CREATE TABLE IF NOT EXISTS questions (user_id INTEGER, question TEXT)")
conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –∫–∞–Ω–∞–ª–∞
channel_messages = []
if os.path.exists("channel_archive.json"):
    with open("channel_archive.json", "r", encoding="utf-8") as f:
        channel_messages = json.load(f)

# –ü–∞–º—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
user_histories = {}
user_states = {}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = update.effective_user.full_name
    c.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    await update.message.reply_text(
        "‚ú® –ü—Ä–∏–≤–µ—Ç, —è –¢–∞—Ç—å—è–Ω–∏–Ω –ø–æ–º–æ—â–Ω–∏–∫. –•–æ—á–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –≤–∞–∂–Ω–æ–º?",
        reply_markup=ReplyKeyboardMarkup([['–ú–µ–¥–∏—Ç–∞—Ü–∏—è'], ['–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è'], ['–ü—Ä–æ—Å—Ç–æ –ø–æ–±—É–¥—å —Ä—è–¥–æ–º']], resize_keyboard=True)
    )

# –î–∏–∞–ª–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
async def respond(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.lower()
    c.execute("INSERT INTO questions (user_id, question) VALUES (?, ?)", (user_id, user_message))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
    history = user_histories.get(user_id, [])
    history.append({"role": "user", "content": user_message})
    if len(history) > 5:
        history = history[-5:]
    user_histories[user_id] = history

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    if "—Ç—Ä–µ–≤–æ–≥–∞" in user_message or "–±–æ—é—Å—å" in user_message:
        user_states[user_id] = "anxiety"
        await update.message.reply_text(
            "–Ø —Ä—è–¥–æ–º. –≠—Ç–∞ —Ç—Ä–µ–≤–æ–≥–∞ –±–æ–ª—å—à–µ –ø—Ä–æ —Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å?"
        )
        return
    elif user_states.get(user_id) == "anxiety":
        user_states[user_id] = "offer_practice"
        await update.message.reply_text("–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –º—è–≥–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ. –•–æ—á–µ—à—å?")
        return
    elif user_states.get(user_id) == "offer_practice" and "–¥–∞" in user_message:
        await update.message.reply_text("üå¨ –ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—ã—à–∏. –ì–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö‚Ä¶ –∏ –º—è–≥–∫–∏–π –≤—ã–¥–æ—Ö‚Ä¶ –Ø –∑–¥–µ—Å—å.")
        user_states[user_id] = "invite"
        return
    elif user_states.get(user_id) == "invite":
        await update.message.reply_text("–•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫? –ü—Ä–∏–≥–ª–∞—à–∞—é –≤ –∫–ª—É–±, –≥–¥–µ –º—ã –≤–º–µ—Å—Ç–µ –¥—ã—à–∏–º, —á—É–≤—Å—Ç–≤—É–µ–º –∏ —Ä–∞—Å—Ç—ë–º üåø")
        user_states[user_id] = None
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞ –∫–∞–Ω–∞–ª–∞
    matched = next((m["text"] for m in channel_messages if isinstance(m, dict) and "text" in m and m["text"] and m["text"] in user_message), None)

    if matched:
        reply_text = f"üí¨ –≠—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¢–∞—Ç—å—è–Ω—ã:\n\n{matched}"

{matched}"
    else:
        messages = [{
            "role": "system",
            "content": (
                "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –≥–ª—É–±–æ–∫–æ —á—É–≤—Å—Ç–≤—É—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ç–∏–ª–µ –¢–∞—Ç—å—è–Ω—ã –ó–∞—Ä–µ—Ü–∫–æ–π. –¢—ã —Å–ª—ã—à–∏—à—å, —á—É–≤—Å—Ç–≤—É–µ—à—å, –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–æ—Ä—ã, —Ä–µ—Å—É—Ä—Å–∞, –º—è–≥–∫–æ—Å—Ç–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –ì–æ–≤–æ—Ä–∏—à—å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏, –º—è–≥–∫–æ, —Å –ª—é–±–æ–≤—å—é."
            )
        }] + history
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                temperature=0.9,
                presence_penalty=0.5,
                frequency_penalty=0.4,
                messages=messages
            )
            reply_text = response.choices[0].message["content"]
        except Exception as e:
            reply_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    user_histories[user_id].append({"role": "assistant", "content": reply_text})
    await update.message.reply_text(reply_text)

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, respond))
    app.run_polling()

if __name__ == "__main__":
    main()
