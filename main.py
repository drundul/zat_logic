import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import openai
import json

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render (–ø–æ—Ä—Ç 10000)
def fake_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Bot is running.')
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), Handler)
    server.serve_forever()

threading.Thread(target=fake_server).start()

# OpenAI –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")

# Telegram —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TELEGRAM_TOKEN)
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
try:
    with open("channel_archive.json", "r", encoding="utf-8") as f:
        archive_data = json.load(f)
except:
    archive_data = []

# –ü–∞–º—è—Ç—å
chat_histories = {}
user_questions = {}
unique_users = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ú® –ü—Ä–∏–≤–µ—Ç, —è –¢–∞—Ç—å—è–Ω–∏–Ω –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á—ë–º-—Ç–æ –≤–∞–∂–Ω–æ–º üí´")

def get_matched_archive_response(user_message):
    if not archive_data:
        return ""
    for item in archive_data:
        text = item.get("text", "").lower()
        if any(word in user_message.lower() for word in ["—Å—Ç—Ä–∞—Ö", "—Ç—Ä–µ–≤–æ–≥–∞", "–¥–µ–Ω—å–≥–∏", "–∂–µ–ª–∞–Ω–∏–µ", "–∫–æ–Ω—Ç—Ä–æ–ª—å"]):
            if text and len(text) > 50:
                return text
    return ""

async def respond(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.text

    unique_users.add(user_id)
    user_questions.setdefault(user_id, []).append(user_text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    history = chat_histories.get(user_id, [])
    history.append({"role": "user", "content": user_text})
    if len(history) > 5:
        history = history[-5:]
    chat_histories[user_id] = history

    # System prompt –≤ —Å—Ç–∏–ª–µ –¢–∞—Ç—å—è–Ω—ã
    system_prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –¢–∞—Ç—å—è–Ω–∞, –º—è–≥–∫–∞—è, —Ç–µ–ø–ª–∞—è, –≥–ª—É–±–æ–∫–æ –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è. "
        "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∂–µ–Ω—â–∏–Ω–µ 35‚Äì54 –ª–µ—Ç, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–≤–æ–∂–∏—Ç—Å—è, –∏—â–µ—Ç –ø—É—Ç—å –∫ —Å–µ–±–µ, —Ö–æ—á–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∫–æ—è –∏ –¥–æ—Å—Ç–∞—Ç–∫–∞. "
        "–ì–æ–≤–æ—Ä–∏ –æ–±—Ä–∞–∑–Ω–æ, —Å —Ç–µ–ø–ª–æ–º, –∫–∞–∫ –¥—É—à–µ–≤–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–µ–¥–∏ –æ—Ç –±–æ–ª–∏ –∫ –¥–æ–≤–µ—Ä–∏—é."
    )

    messages = [{"role": "system", "content": system_prompt}] + history

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages
        )
        reply_text = response.choices[0].message["content"]
    except Exception as e:
        reply_text = "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: " + str(e)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "assistant", "content": reply_text})
    chat_histories[user_id] = history

    # –û—Ç–≤–µ—Ç –∏–∑ –∞—Ä—Ö–∏–≤–∞
    matched = get_matched_archive_response(user_text)
    if matched:
        reply_text += f"\n\nüí¨ –≠—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¢–∞—Ç—å—è–Ω—ã:\n\n{matched}"

    await update.message.reply_text(reply_text)

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, respond))

if __name__ == "__main__":
    application.run_polling()
